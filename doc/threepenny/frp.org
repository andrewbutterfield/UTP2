#+OPTIONS: toc:nil    
#+LATEX_HEADER: \usepackage{parskip}

* Functional Reactive Programming (FRP)

** Imperative or Reactive
The application will in some places refer to some data which will change over
time, due to user input or for other reasons. For example, on the home screen an
element displays the current workspace directory, which initially is ~Nothing~
but will become a ~Just String~ once the user has selected a workspace. Updating
elements to reflect changes in their dependant data can be done in two ways.
First, on change of the data we can update each element which uses that data,
this is the imperative style of doing things. Second, we can define any element
which uses the data to *react* to changes in the data.

*Element which displays the current workspace.*
#+BEGIN_SRC haskell
text <- UI.div # set UI.text
  "I want to display the current workspace"
#+END_SRC

*Function that executes when a workspace is selected.*
#+BEGIN_SRC haskell
on UI.valuechange selector $ const $ do
  -- The current workspace has changed.
#+END_SRC

Regarding the first approach, the imperative style, when we write an element
that depends on changing data we also write code to update that element whenever
the data changes. The code to display the element and the code which deals with
the change in the data may be in separate modules, or at least separate to some
degree. The fact that the code which deals with the change in the data has to
update any element which are dependant the data, is a violation of the Law of
Demeter which says we should minimize coupling betwen modules. Furtheremore, the
code which deals with the change in the data will need to have references to the
elements it's expected to update, these would need to be passed either as
parameters or monadically, which is unecessary overhead.

Regarding the second approach, the reactive style, when we write an element that
depends on changing data we still write code to update that element whenever the
data changes. However, the code to update the element is localised around the
code where the element is written. No longer do we have to worry about all the
elements in our codebase which depend on said data, or worry about getting the
references to these elements. We are no longer violating the Law of Demeter.

** FRP in More Detail
  
** FRP Architecture in UTP2
